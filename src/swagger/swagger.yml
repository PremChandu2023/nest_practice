openapi: 3.0.0
paths:
  /user:
    get:
      operationId: Appcontroller1_getUser
      parameters: []
      responses:
        '200':
          description: ''
  /body:
    post:
      operationId: Appcontroller1_store1
      parameters: []
      responses:
        '201':
          description: ''
  /{dynamic}:
    get:
      operationId: Appcontroller1_getdynamic
      parameters: []
      responses:
        '200':
          description: ''
  /users/{id}:
    get:
      operationId: Appusercontroller_getPipesuse
      parameters:
        - name: id
          required: true
          in: path
          schema:
            type: number
      responses:
        '200':
          description: ''
      tags: &ref_0
        - User pipes practice
  /users/{uuid}:
    get:
      operationId: Appusercontroller_getUUId
      parameters: []
      responses:
        '200':
          description: ''
      tags: *ref_0
  /users/search/{searchid}:
    get:
      operationId: Appusercontroller_searchById
      parameters:
        - name: search
          required: true
          in: path
          schema:
            type: number
      responses:
        '200':
          description: ''
      tags: *ref_0
  /menu:
    get:
      operationId: Menucontroller_getAllMenu
      parameters: []
      responses:
        '200':
          description: ''
      tags: &ref_1
        - Menu
    post:
      operationId: Menucontroller_createMenu
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MenuDto'
      responses:
        '201':
          description: ''
      tags: *ref_1
  /menu/{id}/menuitems:
    get:
      operationId: Menucontroller_getMenuItemsById
      parameters:
        - name: id
          required: true
          in: path
          schema:
            type: number
      responses:
        '200':
          description: ''
      tags: *ref_1
  /menu/{id}/menuitem:
    post:
      operationId: Menucontroller_createMenuItem
      parameters:
        - name: id
          required: true
          in: path
          schema:
            type: number
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MenuItemDto'
      responses:
        '201':
          description: ''
      tags: *ref_1
  /book/postQuestion:
    post:
      operationId: Bookscontroller_createQuestion
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/createQuestionDto'
      responses:
        '201':
          description: ''
      tags: &ref_2
        - Book
  /book/{id}:
    get:
      operationId: Bookscontroller_getBooks
      parameters:
        - example: 1
          name: id
          in: query
          required: true
          schema:
            type: string
        - name: Authorization
          in: header
          description: requires authorization
          schema:
            type: string
      responses:
        '200':
          description: Gives details of the book
          content:
            application/json:
              schema:
                properties:
                  id:
                    type: number
                    example: 1
                  name:
                    type: string
                    example: John Doe
                  age:
                    type: number
                    example: 30
        '204':
          description: Request was successfull but no content
        '400':
          description: Bad request
          content:
            application/json:
              examples:
                InvalidDataType:
                  description: >-
                    Property is expected to be a numeric value representing id,
                    but the client provides a non-numeric value
                  value:
                    errormessage: Given_input_datatype_for_id_is_wrong
                DateValidation:
                  description: >-
                    If the publishedYear is a date property, the server might
                    perform date validation to ensure it is a valid date format.
                  value:
                    message: Given_Date_format_is_wrong
        '401':
          description: Unauthorized
          content:
            application/json:
              examples:
                AcceswithoutAuthorization:
                  description: ' If the client attempts to access certain book-related endpoints without providing any authentication credentials'
                  value:
                    message: Authentication_is_required_to_access_the_resource.
                ExpiredAuthenticationToken:
                  description: >-
                    When the client sends an authentication token that is
                    invalid, expired, or not recognized by the server
                  value:
                    message: client's_token_is_not_valid_for_the_requested_operation
        '403':
          description: Forbidden
          content:
            application/json:
              examples:
                InsufficientPrivileges:
                  description: ' If the client provides authentication credentials, but the credentials do not grant sufficient privileges to access a specific book-related operation'
                  value:
                    message: >-
                      client_does_not_have_the_required_authorization_to_perform_the_requested_action.
                RoleBasedAccessControl:
                  description: >-
                    If the API uses role-based access control, the server may
                    respond with a 403 status code when a user with a certain
                    role tries to access an operation that requires a higher
                    role or specific permissions.
                  value:
                    message: >-
                      User_with_this_role_is_not_permitted_to_access_the_resource
        '500':
          description: Internal Server Error
          content:
            application/json:
              examples:
                DatabaseErrors:
                  description: ' If there are issues with the database that prevent the server from querying or updating book data'
                  value:
                    message: >-
                      Database_connection_failures,_syntax
                      errors,_or_other_database-related_issue
                DependencyIssues:
                  description: >-
                    The server may use various dependencies (libraries, modules,
                    etc.) to handle book-related tasks.If there are conflicts or
                    issues with these dependencies, it can lead to internal
                    server errors.
                  value:
                    message: ' It_has_an_internal_server_errors.'
      tags: *ref_2
    put:
      operationId: Bookscontroller_updateBook
      summary: Update a book
      parameters:
        - name: id
          required: true
          in: path
          schema:
            type: number
      requestBody:
        required: true
        description: Books to be updated
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BookProperties'
            examples:
              example1:
                description: All the required fields needed to be given in body section
                value:
                  title: Book Title 1
                  author: Author 1
                  publishedYear: 2022
                  genre: Fiction
      responses:
        '200':
          description: Updates the book with given id
          content:
            application/json:
              examples:
                SuccessfulBookUpdate: &ref_3
                  description: >-
                    The client sends a PUT request to update an existing book
                    resource,
                  value:
                    id: 1
                    title: Book 1
                    author: Author 1
                    publishedYear: 2022
                    genre: Fiction
                Bookauthor: *ref_3
        '400':
          description: Bad request
          content:
            application/json:
              examples:
                badRequest:
                  description: >-
                    If the client sends a PUT request with data of incorrect
                    data types (e.g., sending a string for a numeric property),
                    the server should respond with a 400 status code.
                  value:
                    id: 1
                    title: Book 1
                    publishedYear: '2022'
                    genre: Fiction
                  message: author_is_missing
                DataValidation:
                  description: >-
                    The server should perform data validation on the
                    client-provided data. If the data does not meet the required
                    validation rules
        '401':
          description: Unauthorized
          content:
            application/json:
              examples:
                AcceswithoutAuthorization:
                  description: ' If the client attempts to access certain book-related endpoints without providing any authentication credentials'
                  value:
                    message: Authentication_is_required_to_access_the_resource.
                ExpiredAuthenticationToken:
                  description: >-
                    When the client sends an authentication token that is
                    invalid, expired, or not recognized by the server
                  value:
                    message: client's_token_is_not_valid_for_the_requested_operation
        '404':
          description: Book Not found
          content:
            application/json:
              examples:
                UpdatingNonExistentBook:
                  description: >-
                    If the client sends a PUT request to update a book with a
                    specific ID, but the book with that ID does not exist in the
                    database or data source
                  value:
                    message: Book_with_ID_123_not_found.
                BookIDNotProvided:
                  description: >-
                    If the client sends a PUT request to update a book, but the
                    request does not include a valid book ID in the request URL
                    or request body, the server should respond with a 404 status
                    code.
                  value:
                    message: >-
                      The_server_needs_the_book-ID_to_identify_which_book_to_update.
                BookResourceMoved:
                  description: >-
                    In some cases, if the book resource has been moved to a
                    different URL or has been deleted, a PUT request to the
                    original URL might result in a 404 status code.
                  value:
                    message: >-
                      The_server_needs_the_book-ID_to_identify_which_book_to_update.
      tags: *ref_2
    delete:
      operationId: Bookscontroller_deleteBook
      summary: Delete a book by ID
      parameters:
        - name: id
          required: true
          in: path
          schema:
            type: number
      responses:
        '200':
          description: Successfully deleted the book
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Book Not Found
          content:
            application/json:
              examples:
                InvalidBookID:
                  description: >-
                    If the client sends a DELETE request to remove a book but
                    provides an invalid or non-existent book ID in the request
                    URL, the server should respond with a 400 status code. 
                  value:
                    mesaage: >-
                      This indicates that the client's request cannot be
                      processed due to an incorrect book identifier..
                BookIDinUse:
                  description: >-
                    If the book deletion is not allowed due to referential
                    integrity constraints, such as the book being referenced in
                    other parts of the system 
                  value:
                    mesaage: >-
                      This indicates that the book cannot be deleted due to
                      existing relationships.
        '500':
          description: Internal server error
          content:
            application/json:
              examples:
                DatabaseorDataSourceErrors:
                  description: >-
                    If the server encounters issues while deleting the book from
                    the database or data source, it may result in a 500 status
                    code.
                  value:
                    mesaage: >-
                      This can occur if there is a database connection failure
                      or if the delete query fails due to a technical issue.
                ServersideValidationFailures:
                  description: >-
                    While the client-side validation ensures that the request
                    meets the basic requirements, the server-side validation
                    might have additional rules or constraints.  
                  value:
                    mesaage: >-
                      If the server-side validation fails unexpectedly during
                      the delete operation, it may result in a 500 status code
                UnexpectedExceptionsorErrors:
                  description: >-
                    There might be scenarios where the server encounters
                    unexpected exceptions, errors, or bugs during the delete
                    operation for a book 
                  value:
                    mesaage: Unhandled errors can lead to a 500 status code.
      tags: *ref_2
  /book/{id}/postcategory:
    post:
      operationId: Bookscontroller_createCategory
      parameters:
        - name: id
          required: true
          in: path
          schema:
            type: number
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/createCategoryDto'
      responses:
        '201':
          description: ''
      tags: *ref_2
  /book/question:
    get:
      operationId: Bookscontroller_getQuestion
      parameters: []
      responses:
        '200':
          description: ''
      tags: *ref_2
  /book:
    post:
      operationId: Bookscontroller_createBook
      summary: Add the books in books array
      parameters:
        - name: Authorization
          in: header
          description: Bearer token for authentication
          schema:
            type: string
      requestBody:
        required: true
        description: Book object to be created
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Books'
      responses:
        '201':
          description: Returns the success operation
          content:
            application/json:
              examples:
                Book:
                  description: Gives the book object
                  value:
                    id: 1
                    bookid: '20'
                    bookName: chandu
                    bookAuthor: sou1
                    isPresent: true
                Conditionalcreation:
                  description: >-
                    API allows the creation of a new book only if a specific
                    condition is met, such as checking whether the title of the
                    book is unique.
                  value:
                    message:
                      id: 123
                      title: Unique Book Title
                      author: Author Name
                      publishedYear: 2022
                      genre: Fiction
        '400':
          description: Bad request
          content:
            application/json:
              examples:
                InvalidDataType:
                  description: >-
                    Property is expected to be a numeric value representing id,
                    but the client provides a non-numeric value
                  value:
                    errormessage: Given_input_datatype_for_id_is_wrong
                MissingRequiredFields:
                  description: >-
                    If the client sends a POST request to create a new book
                    resource, but some of the required fields (e.g., title,
                    author, publishedYear) are missing from the request body
                  value:
                    message: 'title_is_missing '
                InvalidDataFormat:
                  description: >-
                    The server may return a 400 status code if the client sends
                    the request with a malformed or invalid data format.
                  value:
                    message: >-
                      If the request body is not in the expected JSON format,
                      the server should reject the request with a 400 response.
        '409':
          description: Conflict error
          schema:
            properties:
              Statuscode:
                type: number
                example: 409
              message:
                type: string
                example: Book already exists
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BookProperties'
        '500':
          description: Internal server error
          content:
            application/json:
              examples:
                DatabaseErrors:
                  description: ' If there are issues with the database that prevent the server from querying or updating book data'
                  value:
                    message: >-
                      Database_connection_failures,_syntax
                      errors,_or_other_database-related_issue
                DependencyIssues:
                  description: >-
                    The server may use various dependencies (libraries, modules,
                    etc.) to handle book-related tasks.If there are conflicts or
                    issues with these dependencies, it can lead to internal
                    server errors.
                  value:
                    message: ' It_has_an_internal_server_errors.'
      tags: *ref_2
  /book/author:
    get:
      operationId: Bookscontroller_getBooksby
      parameters:
        - name: author
          required: true
          in: query
          schema:
            type: string
        - name: genre
          required: true
          in: query
          schema:
            type: string
      responses:
        '401':
          description: Unauthorized
          content:
            application/json:
              examples:
                Unauthorizedrequest:
                  description: >-
                    Client sends a request to access a book resource that
                    requires authentication, but the client's credentials are
                    invalid or missing, resulting in a 401 Unauthorized
                    response.
                  value:
                    message: 'Unauthorized: Invalid or missing authentication token'
      tags: *ref_2
  /usersof:
    post:
      operationId: UserController_createQuestion
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/createUserDto'
      responses:
        '201':
          description: ''
  /usersof/{id}/postphoto:
    post:
      operationId: UserController_createPhoto
      parameters:
        - name: id
          required: true
          in: path
          schema:
            type: number
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/createPhotoDto'
      responses:
        '201':
          description: ''
  /store:
    post:
      operationId: ElectronicsController_createElectronicStore
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Products'
      responses:
        '201':
          description: Catalog created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Products'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: >-
            You do not have sufficient permissions to access the Electronics
            catalog.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      tags: &ref_4
        - Electronicstore
  /store/{name}:
    patch:
      operationId: ElectronicsController_changePrice
      parameters:
        - name: name
          required: true
          in: path
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProductVariant'
      responses:
        '200':
          description: The required details have been updated succefully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProductVariant'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: >-
            You do not have sufficient permissions to access the Electronics
            catalog.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      tags: *ref_4
  /Orders:
    post:
      operationId: OrderController_createOrder
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/createOrderDTo'
      responses:
        '200':
          description: Creats the new Order
          content:
            application/json:
              examples:
                Order:
                  description: Gives the order details
                  value:
                    succes: true
                    data:
                      customerName: premchandu
                      tableNumber: 20
                      order_id: 14
                      date:
                        createdDate: '2023-08-24T08:24:49.956Z'
                        updatedDate: '2023-08-24T08:24:49.956Z'
                OrderById:
                  description: Gives the order details
                  value:
                    succes: true
                    data:
                      order_id: 11
                      customerName: ramanjenulu
                      tableNumber: 0
                      orderStatus: completed
                      paymentStatus: approved
                      orderItems:
                        - orderItem_id: 17
                          quantity: 3000
                          menuitems:
                            menuitem_id: 4
                            menu_itemname: Pancakes
                            price: 10
                            tax: 5
                OrderIdNotFound:
                  description: Gives the order details
                  value:
                    message: Invalid id Order with given id is not available
                    error: Not Found
                    statusCode: 404
      tags: &ref_5
        - Orders
      security: &ref_6
        - bearer: []
  /Orders/order/{id}:
    get:
      operationId: OrderController_getOrderDetailsById
      parameters:
        - name: id
          required: true
          in: path
          schema:
            type: number
      responses:
        '200':
          description: Gives the orders details by given id
          content:
            application/json:
              examples:
                Success:
                  description: Gives the order details
                  value:
                    succes: true
                    data:
                      order_id: 11
                      customerName: ramanjenulu
                      tableNumber: 0
                      orderStatus: completed
                      paymentStatus: approved
                      orderItems:
                        - orderItem_id: 17
                          quantity: 3000
                          menuitems:
                            menuitem_id: 4
                            menu_itemname: Pancakes
                            price: 10
                            tax: 5
        '401':
          description: Unauthorized
          content:
            application/json:
              examples:
                AcceswithoutAuthorization:
                  description: ' If the client attempts to access certain book-related endpoints without providing any authentication credentials'
                  value:
                    message: Authentication_is_required_to_access_the_resource.
                ExpiredAuthenticationToken:
                  description: >-
                    When the client sends an authentication token that is
                    invalid, expired, or not recognized by the server
                  value:
                    message: client's_token_is_not_valid_for_the_requested_operation
        '403':
          description: Forbidden
          content:
            application/json:
              examples:
                InsufficientPrivileges:
                  description: ' If the client provides authentication credentials, but the credentials do not grant sufficient privileges to access a specific book-related operation'
                  value:
                    message: >-
                      client_does_not_have_the_required_authorization_to_perform_the_requested_action.
                RoleBasedAccessControl:
                  description: >-
                    If the API uses role-based access control, the server may
                    respond with a 403 status code when a user with a certain
                    role tries to access an operation that requires a higher
                    role or specific permissions.
                  value:
                    message: >-
                      User_with_this_role_is_not_permitted_to_access_the_resource
        '404':
          description: Order with id not found
          content:
            application/json:
              examples:
                NotFound:
                  description: Gives the order details
                  value:
                    message: Invalid id Order with given id is not available
                    error: Not Found
                    statusCode: 404
      tags: *ref_5
      security: *ref_6
  /Orders/ordername/{name}:
    get:
      operationId: OrderController_getOrderDetailsByName
      parameters:
        - name: name
          required: true
          in: path
          schema:
            type: string
      responses:
        '200':
          description: ''
      tags: *ref_5
      security: *ref_6
  /Orders/updateQuantity:
    put:
      operationId: OrderController_updateOrderQuantity
      parameters:
        - name: name
          required: true
          in: query
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/updateOrderDto'
      responses:
        '200':
          description: ''
      tags: *ref_5
      security: *ref_6
  /Orders/menuItem:
    delete:
      operationId: OrderController_deleteMenuItem
      parameters:
        - name: OrderId
          required: true
          in: query
          schema:
            type: number
        - name: menuItem
          required: true
          in: query
          schema:
            type: number
      responses:
        '200':
          description: ''
      tags: *ref_5
      security: *ref_6
  /Orders/{id}/updateStatus:
    patch:
      operationId: OrderController_updatePaymentStatus
      parameters:
        - name: id
          required: true
          in: path
          schema:
            type: number
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/updatePaymentDTo'
      responses:
        '200':
          description: ''
      tags: *ref_5
      security: *ref_6
  /exception/{id}:
    get:
      operationId: ExceptionController_getId
      parameters:
        - name: id
          required: true
          in: path
          schema:
            type: number
      responses:
        '200':
          description: ''
      tags: &ref_7
        - 'custom exceptions  can be sent '
    post:
      operationId: ExceptionController_createMemberId
      parameters: []
      requestBody:
        required: true
        description: body should be in the format of country
        content:
          application/json:
            schema:
              type: string
      responses:
        '201':
          description: ''
      tags: *ref_7
    put:
      operationId: ExceptionController_updateMember
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/OlympicMedalDto'
      responses:
        '200':
          description: ''
      tags: *ref_7
  /exception/{status}:
    get:
      operationId: ExceptionController_getExceptionfor
      parameters:
        - name: status
          required: true
          in: path
          schema:
            type: string
      responses:
        '200':
          description: ''
      tags: *ref_7
  /exception/delete:
    delete:
      operationId: ExceptionController_deleteMember
      parameters: []
      responses:
        '200':
          description: ''
      tags: *ref_7
  /polls:
    post:
      operationId: PollsController_createPoll
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/createPollDto'
      responses:
        '201':
          description: ''
      tags: &ref_8
        - Polls
  /polls/{id}/option:
    post:
      operationId: PollsController_addOptions
      parameters:
        - name: id
          required: true
          in: path
          schema:
            type: number
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/createOptionDto'
      responses:
        '201':
          description: ''
      tags: *ref_8
  /polls/options:
    get:
      operationId: PollsController_getAllOptions
      parameters: []
      responses:
        '200':
          description: ''
      tags: *ref_8
  /polls/options/{id}:
    get:
      operationId: PollsController_getOptions
      parameters:
        - name: id
          required: true
          in: path
          schema:
            type: number
      responses:
        '200':
          description: ''
      tags: *ref_8
  /polls/all:
    get:
      operationId: PollsController_getAllPolls
      parameters: []
      responses:
        '200':
          description: ''
      tags: *ref_8
  /polls/allUsers:
    get:
      operationId: PollsController_getUserDetails
      parameters: []
      responses:
        '200':
          description: ''
      tags: *ref_8
  /polls/user/{id}:
    get:
      operationId: PollsController_getPollsById
      parameters:
        - name: id
          required: true
          in: path
          schema:
            type: number
      responses:
        '200':
          description: ''
      tags: *ref_8
    put:
      operationId: PollsController_updateUserDetails
      parameters:
        - name: id
          required: true
          in: path
          schema:
            type: number
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateUserDto'
      responses:
        '200':
          description: ''
      tags: *ref_8
  /polls/user:
    post:
      operationId: PollsController_addUser
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserDto'
      responses:
        '201':
          description: ''
      tags: *ref_8
  /polls/{id}:
    put:
      operationId: PollsController_updateUser
      parameters:
        - name: id
          required: true
          in: path
          schema:
            type: number
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserDto'
      responses:
        '200':
          description: ''
      tags: *ref_8
    delete:
      operationId: PollsController_deleteUser
      parameters:
        - name: id
          required: true
          in: path
          schema:
            type: number
      responses:
        '200':
          description: ''
      tags: *ref_8
  /polls/{id}/profile:
    post:
      operationId: PollsController_addUserProfile
      parameters:
        - name: id
          required: true
          in: path
          schema:
            type: number
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/userProfileDto'
      responses:
        '201':
          description: ''
      tags: *ref_8
  /polls/{id}/post:
    post:
      operationId: PollsController_addUserPost
      parameters:
        - name: id
          required: true
          in: path
          schema:
            type: number
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/userPostDto'
      responses:
        '201':
          description: ''
      tags: *ref_8
  /Userdata/allusers:
    get:
      operationId: UserControllers_getAllUsers
      parameters: []
      responses:
        '200':
          description: ''
      tags: &ref_9
        - Usesdata
  /Userdata/allusers/{count}:
    get:
      operationId: UserControllers_getAllUsersCount
      parameters:
        - name: count
          required: true
          in: path
          schema:
            type: number
      responses:
        '200':
          description: ''
      tags: *ref_9
  /Userdata/names:
    get:
      operationId: UserControllers_getbyNames
      parameters:
        - name: firstName
          required: true
          in: query
          schema:
            type: string
        - name: lastName
          required: true
          in: query
          schema:
            type: string
      responses:
        '200':
          description: ''
      tags: *ref_9
  /Userdata/allusersbycondi/{count}:
    get:
      operationId: UserControllers_getAllUsersBycondition
      parameters:
        - name: count
          required: true
          in: path
          schema:
            type: number
      responses:
        '200':
          description: ''
      tags: *ref_9
  /auth/employee/login:
    post:
      operationId: AuthController_employeeLogin
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/loginEmployeeDto'
      responses:
        '201':
          description: ''
      tags: &ref_10
        - employee
  /auth/employee/register:
    post:
      operationId: AuthController_employeeRegister
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/registerEmployeeDto'
      responses:
        '201':
          description: ''
      tags: *ref_10
  /auth/employee/{id}/details:
    get:
      operationId: AuthController_getEmployeeDetails
      parameters:
        - name: id
          required: true
          in: path
          schema:
            type: number
      responses:
        '200':
          description: ''
      tags: *ref_10
  /auth/employee/roles:
    post:
      operationId: AuthController_createRoles
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/createRoleDto'
      responses:
        '201':
          description: ''
      tags: *ref_10
  /auth/employee/updaterole/{id}:
    put:
      operationId: AuthController_updateRoles
      parameters:
        - name: id
          required: true
          in: path
          schema:
            type: number
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/updateRoleDto'
      responses:
        '200':
          description: ''
      tags: *ref_10
info:
  title: chandu
  description: Your API Description
  version: '1.0'
  contact: {}
tags: []
servers:
  - url: http://localhost:3000
components:
  securitySchemes:
    bearer:
      scheme: bearer
      bearerFormat: JWT
      type: http
  schemas:
    MenuDto:
      type: object
      properties: {}
    MenuItemDto:
      type: object
      properties:
        menu_itemname:
          type: string
          example: Pancakes
        price:
          type: number
          example: 20
      required:
        - menu_itemname
        - price
    createQuestionDto:
      type: object
      properties: {}
    createCategoryDto:
      type: object
      properties: {}
    Books:
      type: object
      properties:
        bookid:
          type: number
          example: 1
        bookName:
          type: string
          example: book1
        bookAuthor:
          type: string
          example: author1
        isPresent:
          type: boolean
      required:
        - bookid
        - bookName
        - bookAuthor
        - isPresent
    BookProperties:
      type: object
      properties:
        id:
          type: number
          example: 1
        title:
          type: string
          example: Book 1
        author:
          type: string
          example: Author 1
        publishedYear:
          type: number
          example: 2022
        genre:
          type: string
          example: Fiction
      required:
        - id
        - title
        - author
        - publishedYear
        - genre
    ErrorResponse:
      type: object
      properties:
        message:
          type: string
          example: Given Request has been executed succesfully
      required:
        - message
    createUserDto:
      type: object
      properties: {}
    createPhotoDto:
      type: object
      properties: {}
    ProductVariant:
      type: object
      properties:
        color:
          type: string
          example: Silver
        storage:
          type: string
          example: 256GB
        RAM:
          type: string
          example: 100GB
      required:
        - color
        - storage
        - RAM
    Products:
      type: object
      properties:
        name:
          type: string
          example: Laptop
        price:
          type: number
          example: 200
        variants:
          example:
            color: Silver
            storage: 256GB
            RAM: string
          type: array
          items:
            $ref: '#/components/schemas/ProductVariant'
      required:
        - name
        - price
        - variants
    OrderItemDTo:
      type: object
      properties:
        menuItemId:
          type: number
          example: 1
        quantity:
          type: number
          example: 2
      required:
        - menuItemId
        - quantity
    createOrderDTo:
      type: object
      properties:
        customerName:
          type: string
          example: premchandu
        tableNumber:
          type: number
          example: 20
        items:
          example:
            - menuItemId: 3
              quantity: 1
            - menuItemId: 4
              quantity: 1
          type: array
          items:
            $ref: '#/components/schemas/OrderItemDTo'
      required:
        - customerName
        - tableNumber
        - items
    updateOrderDto:
      type: object
      properties:
        menuItem:
          type: string
          example: Pancakes
        quantity:
          type: number
          example: 10
      required:
        - menuItem
        - quantity
    IsEnum:
      type: object
      properties: {}
    updatePaymentDTo:
      type: object
      properties:
        orderStatus:
          $ref: '#/components/schemas/IsEnum'
      required:
        - orderStatus
    OlympicMedalDto:
      type: object
      properties: {}
    createPollDto:
      type: object
      properties: {}
    createOptionDto:
      type: object
      properties: {}
    UserDto:
      type: object
      properties: {}
    UpdateUserDto:
      type: object
      properties: {}
    userProfileDto:
      type: object
      properties: {}
    userPostDto:
      type: object
      properties: {}
    loginEmployeeDto:
      type: object
      properties: {}
    registerEmployeeDto:
      type: object
      properties: {}
    createRoleDto:
      type: object
      properties: {}
    updateRoleDto:
      type: object
      properties: {}
